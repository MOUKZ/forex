// Mocks generated by Mockito 5.4.5 from annotations
// in ft/test/features/ticker/presentation/ticker_bloc_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:ft/features/ticker/domain/entity/ticket_entity.dart' as _i6;
import 'package:ft/features/ticker/domain/use_cases/get_latest_ticker_data_use_case.dart'
    as _i7;
import 'package:ft/features/ticker/domain/use_cases/get_stream_use_case.dart'
    as _i5;
import 'package:ft/features/ticker/domain/use_cases/subscribe_use_case.dart'
    as _i2;
import 'package:ft/features/ticker/domain/use_cases/unsubscribe_use_case.dart'
    as _i4;
import 'package:ft/features/ticker/presentation/ui_model/presentation_ticker_entity.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SubscribeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscribeUseCase extends _i1.Mock implements _i2.SubscribeUseCase {
  MockSubscribeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#call, [symbol]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [UnSubscribeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnSubscribeUseCase extends _i1.Mock
    implements _i4.UnSubscribeUseCase {
  MockUnSubscribeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#call, [symbol]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [GetStreamUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetStreamUseCase extends _i1.Mock implements _i5.GetStreamUseCase {
  MockGetStreamUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i3.Stream<List<_i6.TickerEntity>?>?> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i3.Future<_i3.Stream<List<_i6.TickerEntity>?>?>.value(),
          )
          as _i3.Future<_i3.Stream<List<_i6.TickerEntity>?>?>);
}

/// A class which mocks [GetLatestTickerDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLatestTickerDataUseCase extends _i1.Mock
    implements _i7.GetLatestTickerDataUseCase {
  MockGetLatestTickerDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.PresentationTickerEntity? call(
    List<_i6.TickerEntity>? entries,
    String? symbol,
  ) =>
      (super.noSuchMethod(Invocation.method(#call, [entries, symbol]))
          as _i8.PresentationTickerEntity?);
}

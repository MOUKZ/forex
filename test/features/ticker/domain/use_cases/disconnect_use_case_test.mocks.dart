// Mocks generated by Mockito 5.4.5 from annotations
// in ft/test/features/ticker/domain/use_cases/disconnect_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:ft/features/ticker/domain/entity/ticket_entity.dart' as _i4;
import 'package:ft/features/ticker/domain/repository/web_socket_repo.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [WebSocketRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketRepository extends _i1.Mock
    implements _i2.WebSocketRepository {
  MockWebSocketRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> subscribe(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#subscribe, [symbol]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> unSubscribe(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#unSubscribe, [symbol]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i3.Stream<List<_i4.TickerEntity>?>?> getStream() =>
      (super.noSuchMethod(
            Invocation.method(#getStream, []),
            returnValue:
                _i3.Future<_i3.Stream<List<_i4.TickerEntity>?>?>.value(),
          )
          as _i3.Future<_i3.Stream<List<_i4.TickerEntity>?>?>);
}
